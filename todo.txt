File with simple task for doing:

1. Create EC2 with nginx in private VPC and attach loadbalancer to it
    a. Add rule to check hostname and deny direct access to lb dnc name
    b. Add tls sertificate
    c. Add redirect rule from 80 to 433


Create Postgres db with Autocreate user with permision to DB (user in db) RDS instace do password in Secret Manager
Create snapshot for DB
Create full dump for DB dump into s3 bucket (see is it possible to import and rise db in another hosting using cdk)


Create alerts for budget


2. Create SNS and SQS

3. Create Mysql DB in private VPC

4. Create MsSql in public VPC and try to save secret endpoint in Secret Manager

5. Create secret manager

6. Add monitoring and alerts for db and ec2

7. Learn lambda in private network.


Questions:
    Коли потрібно краще видаляти бекапи, через яку кількість днів?


cdk-project/
│   app.py                
├── lib/ 
│   ├── stacks/
│   │   ├── vpc_stack.py
|   |   |── other_stacks
│   ├── constructs/
│   │   ├── vpc_endpoints.py
│   │   └── monitoring.py
│   └── configs/
│       ├── dev.yaml
│       ├── staging.yaml
│       └── prod.yaml
├── tests/
├── cdk.json
└── requirements.txt

{
  "bucket_name": "cdkpostgresbackupstack-de-postgresbackupbucketdev1-mrl8o4o0yioq",
  "db_folder": "20250113_030012",
  "db_roles_users_file": "backup_roles_users_20250113_030012.sql",
  "db_file": "backup_database_20250113_030012.dump"
 }


import subprocess
def start_postgresql():
    command = 'su postgres -c "/usr/pgsql-17/bin/pg_ctl -D /var/lib/pgsql/17/data start"'
    try:
        print("Starting PostgreSQL...")
        result = subprocess.run(command, shell=True, check=True, text=True)
        print("PostgreSQL started successfully.")
    except subprocess.CalledProcessError as e:
        print("Failed to start PostgreSQL.")
        print("Error Code:", e.returncode)
        print("Error Output:", e)

if __name__ == "__main__":
    start_postgresql()


---------------------
Workflow to test backup:
1. Create AMI with installed postgresql server
2. After lambda finished creating backup, lambda triggers lambda to create EC2 instance
3. When EC2 created it must trigger lambda to check backups
4. When backup checked it must be downloaded to S3 and to Azure as checked backups
5. When backup downloaded EC2 must trigger lambda to destroy itself